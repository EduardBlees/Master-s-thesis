@using WebPaperAnalyzer.ViewModels
@model WebPaperAnalyzer.ViewModels.AddCriterion

<input type="button" value="Назад" onclick="window.location.href = '@Url.Action("TeacherAddCriterion", "StudentTeacher")';" />

<form asp-action="EditCriterion" asp-controller="StudentTeacher">
<h3>Изменение набора критериев</h3>
<div class="criterion-add-submit">
    <div>
        <h3>
            Название
        </h3>
        <input type="text" asp-for="Name" />
    </div>
    <div>
        <h3>
            Краткое описание
        </h3>
        <textarea type="text" asp-for="Summary"></textarea>
    </div>
    <div>
        <h3>
            Максимальная оценка за статью
        </h3>
        <input type="text" asp-for="MaxScore" />
    </div>
</div>
<div class="criterion-add-edit">
    <h3>
        Уровень водности
    </h3>
    <h5>
        Вес критерия
    </h5>
    <input type="text" asp-for="WaterCriterionFactor" />

    <div class="criterion-add-bounds">
        <div>
            <h5>
                Нижняя граница
            </h5>
            <input type="text" asp-for="WaterCriterionLowerBound" />
        </div>
        <div>
            <h5>
                Верхняя граница
            </h5>
            <input type="text" asp-for="WaterCriterionUpperBound" />
        </div>
    </div>
</div>
<div class="criterion-add-edit">
    <h3>
        Тошнота
    </h3>
    <h5>
        Вес критерия
    </h5>
    <input type="text" asp-for="KeyWordsCriterionFactor" />

    <div class="criterion-add-bounds">
        <div>
            <h5>
                Нижняя граница
            </h5>
            <input type="text" asp-for="KeyWordsCriterionLowerBound" />
        </div>
        <div>
            <h5>
                Верхняя граница
            </h5>
            <input type="text" asp-for="KeyWordsCriterionUpperBound" />
        </div>
    </div>
</div>
<div class="criterion-add-edit">
    <h3>
        Ципф
    </h3>
    <h5>
        Вес критерия
    </h5>
    <input type="text" asp-for="ZipfFactor" />

    <div class="criterion-add-bounds">
        <div>
            <h5>
                Нижняя граница
            </h5>
            <input type="text" asp-for="ZipfFactorLowerBound" />
        </div>
        <div>
            <h5>
                Верхняя граница
            </h5>
            <input type="text" asp-for="ZipfFactorUpperBound" />
        </div>
    </div>
</div>
<div class="criterion-add-submit">
    <div>
        <h3>
            Использование личных местоимений
        </h3>
        <h5>
            Вес критерия
        </h5>
        <input type="text" asp-for="UseOfPersonalPronounsCost" />
        <div>
            <label for="UseOfPersonalPronouns">Использовать гибкую систему оценивания:</label>
            <input type="checkbox" id="UseOfPersonalPronouns" asp-for="UseOfPersonalPronounsGradingTypeVM" onclick="checkboxChange()" />
        </div>
        @if (Model.UseOfPersonalPronounsGradingTypeVM)
        {
            
            <div id="UseOfPersonalPronounsScale" style="display: block">
                @for (int i = 0; i < Model.UseOfPersonalPronounsGrading.Count; i++)
                {
                    <li style="flex-direction: column">
                        @Html.LabelFor(m => m.UseOfPersonalPronounsGrading[i].Boarder)
                        @Html.EditorFor(m => m.UseOfPersonalPronounsGrading[i].Boarder)
                        @Html.LabelFor(m => m.UseOfPersonalPronounsGrading[i].Value)
                        @Html.EditorFor(m => m.UseOfPersonalPronounsGrading[i].Value)
                    </li>
                }
            </div>
            <div id="UseOfPersonalPronounsFine" style="display: none">
                <h5>
                    Штраф
                </h5>
                <input type="text" asp-for="UseOfPersonalPronounsErrorCost" />
            </div>
        }
        else
        {
            <div id="UseOfPersonalPronounsScale" style="display: none">
                @for (int i = 0; i < Model.UseOfPersonalPronounsGrading.Count; i++)
                {
                    <li style="flex-direction: column">
                        @Html.LabelFor(m => m.UseOfPersonalPronounsGrading[i].Boarder)
                        @Html.EditorFor(m => m.UseOfPersonalPronounsGrading[i].Boarder)
                        @Html.LabelFor(m => m.UseOfPersonalPronounsGrading[i].Value)
                        @Html.EditorFor(m => m.UseOfPersonalPronounsGrading[i].Value)
                    </li>
                }
            </div>
            <div id="UseOfPersonalPronounsFine" style="display: block">
                <h5>
                    Штраф
                </h5>
                <input type="text" asp-for="UseOfPersonalPronounsErrorCost" />
            </div>
        }
    </div>
</div>
<div class="criterion-add-submit">
    <div>
        <h3>
            Нет ссылки на источник
        </h3>
        <h5>
            Вес критерия
        </h5>
        <input type="text" asp-for="SourceNotReferencedCost" />
        <div>
            <label for="SourceNotReferenced">Использовать гибкую систему оценивания:</label>
            <input type="checkbox" id="SourceNotReferenced" asp-for="SourceNotReferencedGradingTypeVM" onclick="checkboxChange()" />
        </div>
        @if (Model.UseOfPersonalPronounsGradingTypeVM)
        {
            <div id="SourceNotReferencedScale" style="display: block">
                @for (int i = 0; i < Model.SourceNotReferencedGrading.Count; i++)
                {
                    <li style="flex-direction: column">
                        @Html.LabelFor(m => m.SourceNotReferencedGrading[i].Boarder)
                        @Html.EditorFor(m => m.SourceNotReferencedGrading[i].Boarder)
                        @Html.LabelFor(m => m.SourceNotReferencedGrading[i].Value)
                        @Html.EditorFor(m => m.SourceNotReferencedGrading[i].Value)
                    </li>
                }
            </div>
            <div id="SourceNotReferencedFine" style="display: none">
                <h5>
                    Штраф
                </h5>
                <input type="text" asp-for="SourceNotReferencedErrorCost" />
            </div>
        }
        else
        {
            <div id="SourceNotReferencedScale" style="display: none">
                @for (int i = 0; i < Model.SourceNotReferencedGrading.Count; i++)
                {
                    <li style="flex-direction: column">
                        @Html.LabelFor(m => m.SourceNotReferencedGrading[i].Boarder)
                        @Html.EditorFor(m => m.SourceNotReferencedGrading[i].Boarder)
                        @Html.LabelFor(m => m.SourceNotReferencedGrading[i].Value)
                        @Html.EditorFor(m => m.SourceNotReferencedGrading[i].Value)
                    </li>
                }
            </div>
            <div id="SourceNotReferencedFine" style="display: block">
                <h5>
                    Штраф
                </h5>
                <input type="text" asp-for="SourceNotReferencedErrorCost" />
            </div>
        }
    </div>
</div>
<div class="criterion-add-submit">
    <div>
        <h3>
            Короткий раздел
        </h3>
        <h5>
            Вес критерия
        </h5>
        <input type="text" asp-for="ShortSectionCost" />
        <div>
            <label for="ShortSection">Использовать гибкую систему оценивания:</label>
            <input type="checkbox" id="ShortSection" asp-for="ShortSectionGradingTypeVM" onclick="checkboxChange()" />
        </div>
        @if (Model.UseOfPersonalPronounsGradingTypeVM)
        {
            <div id="ShortSectionScale" style="display: block">
                @for (int i = 0; i < Model.ShortSectionGrading.Count; i++)
                {
                    <li style="flex-direction: column">
                        @Html.LabelFor(m => m.ShortSectionGrading[i].Boarder)
                        @Html.EditorFor(m => m.ShortSectionGrading[i].Boarder)
                        @Html.LabelFor(m => m.ShortSectionGrading[i].Value)
                        @Html.EditorFor(m => m.ShortSectionGrading[i].Value)
                    </li>
                }
            </div>
            <div id="ShortSectionFine" style="display: none">
                <h5>
                    Штраф
                </h5>
                <input type="text" asp-for="ShortSectionErrorCost" />
            </div>
        }
        else
        {
            <div id="ShortSectionScale" style="display: none">
                @for (int i = 0; i < Model.ShortSectionGrading.Count; i++)
                {
                    <li style="flex-direction: column">
                        @Html.LabelFor(m => m.ShortSectionGrading[i].Boarder)
                        @Html.EditorFor(m => m.ShortSectionGrading[i].Boarder)
                        @Html.LabelFor(m => m.ShortSectionGrading[i].Value)
                        @Html.EditorFor(m => m.ShortSectionGrading[i].Value)
                    </li>
                }
            </div>
            <div id="ShortSectionFine" style="display: block">
                <h5>
                    Штраф
                </h5>
                <input type="text" asp-for="ShortSectionErrorCost" />
            </div>
        }
    </div>
</div>
<div class="criterion-add-submit">
    <div>
        <h3>
            Нет ссылки на рисунок
        </h3>
        <h5>
            Вес критерия
        </h5>
        <input type="text" asp-for="PictureNotReferencedCost" />
        <div>
            <label for="PictureNotReferenced">Использовать гибкую систему оценивания:</label>
            <input type="checkbox" id="PictureNotReferenced" asp-for="PictureNotReferencedGradingTypeVM" onclick="checkboxChange()" />
        </div>
        @if (Model.UseOfPersonalPronounsGradingTypeVM)
        {
            <div id="PictureNotReferencedScale" style="display: block">
                @for (int i = 0; i < Model.PictureNotReferencedGrading.Count; i++)
                {
                    <li style="flex-direction: column">
                        @Html.LabelFor(m => m.PictureNotReferencedGrading[i].Boarder)
                        @Html.EditorFor(m => m.PictureNotReferencedGrading[i].Boarder)
                        @Html.LabelFor(m => m.PictureNotReferencedGrading[i].Value)
                        @Html.EditorFor(m => m.PictureNotReferencedGrading[i].Value)
                    </li>
                }
            </div>
            <div id="PictureNotReferencedFine" style="display: none">
                <h5>
                    Штраф
                </h5>
                <input type="text" asp-for="PictureNotReferencedErrorCost" />
            </div>
        }
        else
        {
            <div id="PictureNotReferencedScale" style="display: none">
                @for (int i = 0; i < Model.PictureNotReferencedGrading.Count; i++)
                {
                    <li style="flex-direction: column">
                        @Html.LabelFor(m => m.PictureNotReferencedGrading[i].Boarder)
                        @Html.EditorFor(m => m.PictureNotReferencedGrading[i].Boarder)
                        @Html.LabelFor(m => m.PictureNotReferencedGrading[i].Value)
                        @Html.EditorFor(m => m.PictureNotReferencedGrading[i].Value)
                    </li>
                }
            </div>
            <div id="PictureNotReferencedFine" style="display: block">
                <h5>
                    Штраф
                </h5>
                <input type="text" asp-for="PictureNotReferencedErrorCost" />
            </div>
        }
    </div>
</div>
<div class="criterion-add-submit" style="margin-bottom: 3%">
    <div>
        <h3>
            Нет ссылки на таблицу
        </h3>
        <h5>
            Вес критерия
        </h5>
        <input type="text" asp-for="TableNotReferencedCost" />
        <div>
            <label for="TableNotReferenced">Использовать гибкую систему оценивания:</label>
            <input type="checkbox" id="TableNotReferenced" asp-for="TableNotReferencedGradingTypeVM" onclick="checkboxChange()" />
        </div>
        @if (Model.UseOfPersonalPronounsGradingTypeVM)
        {
            <div id="TableNotReferencedScale" style="display: block">
                @for (int i = 0; i < Model.TableNotReferencedGrading.Count; i++)
                {
                    <li style="flex-direction: column">
                        @Html.LabelFor(m => m.TableNotReferencedGrading[i].Boarder)
                        @Html.EditorFor(m => m.TableNotReferencedGrading[i].Boarder)
                        @Html.LabelFor(m => m.TableNotReferencedGrading[i].Value)
                        @Html.EditorFor(m => m.TableNotReferencedGrading[i].Value)
                    </li>
                }
            </div>
            <div id="TableNotReferencedFine" style="display: none">
                <h5>
                    Штраф
                </h5>
                <input type="text" asp-for="TableNotReferencedErrorCost" />
            </div>
        }
        else
        {
            <div id="TableNotReferencedScale" style="display: none">
                @for (int i = 0; i < Model.TableNotReferencedGrading.Count; i++)
                {
                    <li style="flex-direction: column">
                        @Html.LabelFor(m => m.TableNotReferencedGrading[i].Boarder)
                        @Html.EditorFor(m => m.TableNotReferencedGrading[i].Boarder)
                        @Html.LabelFor(m => m.TableNotReferencedGrading[i].Value)
                        @Html.EditorFor(m => m.TableNotReferencedGrading[i].Value)
                    </li>
                }
            </div>
            <div id="TableNotReferencedFine" style="display: block">
                <h5>
                    Штраф
                </h5>
                <input type="text" asp-for="TableNotReferencedErrorCost" />
            </div>
        }
    </div>
</div>
<div class="criterion-add-submit" style="margin-bottom: 3%">
    <div>
        <h3>
            Запрещенные словари
        </h3>
        <h5>
            Вес критерия
        </h5>
        <input type="text" asp-for="ForbiddenWordsCost" />
        <div>
            <label for="ForbiddenWords">Использовать гибкую систему оценивания:</label>
            <input type="checkbox" id="ForbiddenWords" asp-for="ForbiddenWordsGradingTypeVM" onclick="checkboxChange()" />
        </div>
        @if (Model.UseOfPersonalPronounsGradingTypeVM)
        {
            <div id="ForbiddenWordsScale" style="display: block">
                @for (int i = 0; i < Model.ForbiddenWordsGrading.Count; i++)
                {
                    <li style="flex-direction: column">
                        @Html.LabelFor(m => m.ForbiddenWordsGrading[i].Boarder)
                        @Html.EditorFor(m => m.ForbiddenWordsGrading[i].Boarder)
                        @Html.LabelFor(m => m.ForbiddenWordsGrading[i].Value)
                        @Html.EditorFor(m => m.ForbiddenWordsGrading[i].Value)
                    </li>
                }
            </div>
            <div id="ForbiddenWordsFine" style="display: none">
                <h5>
                    Штраф
                </h5>
                <input type="text" asp-for="ForbiddenWordsErrorCost" />
            </div>
        }
        else
        {
            <div id="ForbiddenWordsScale" style="display: none">
                @for (int i = 0; i < Model.ForbiddenWordsGrading.Count; i++)
                {
                    <li style="flex-direction: column">
                        @Html.LabelFor(m => m.ForbiddenWordsGrading[i].Boarder)
                        @Html.EditorFor(m => m.ForbiddenWordsGrading[i].Boarder)
                        @Html.LabelFor(m => m.ForbiddenWordsGrading[i].Value)
                        @Html.EditorFor(m => m.ForbiddenWordsGrading[i].Value)
                    </li>
                }
            </div>
            <div id="ForbiddenWordsFine" style="display: block">
                <h5>
                    Штраф
                </h5>
                <input type="text" asp-for="ForbiddenWordsErrorCost" />
            </div>
        }
    </div>
</div>
@for (int i = 0; i < @Model.Dictionaries.Count; i++)
{
    <li style="text-align: left; margin-left: 20%">
        @Html.CheckBoxFor(m => m.Dictionaries[i].IsSelected)
        @Html.LabelFor(m => m.Dictionaries[i].Name, Model.Dictionaries[i].Name)
        @Html.HiddenFor(m => m.Dictionaries[i].Name)
    </li>
}
<input type="hidden" asp-for="Id" />
<input type="hidden" asp-for="TeacherLogin" />
@if (User.Identity.Name == @Model.TeacherLogin)
{
    <div class="criterion-add-edit">
        <input type="submit" value="Сохранить изменения" class="add-button" />
        <input type="button" class="delete-button" value="Удалить критерий" onclick="window.location.href = '@Url.Action("DeleteCriterion", "StudentTeacher", new {id = @Model.Id})';" />
    </div>
}
</form>
<script type="text/javascript">
    function checkboxChange() {
        var checkBox = document.getElementById(event.target.id);
        var fine;
        var scale;
        if (event.target.id === "UseOfPersonalPronouns") {
            fine = document.getElementById("UseOfPersonalPronounsFine");
            scale = document.getElementById("UseOfPersonalPronounsScale");
            if (checkBox.checked === true) {
                fine.style.display = "none";
                scale.style.display = "block";
                @Model.UseOfPersonalPronounsGradingTypeVM = true;
            } else {
                fine.style.display = "block";
                scale.style.display = "none";
                @Model.UseOfPersonalPronounsGradingTypeVM = false;
            }
        }
        if (event.target.id === "SourceNotReferenced") {
            fine = document.getElementById("SourceNotReferencedFine");
            scale = document.getElementById("SourceNotReferencedScale");
            if (checkBox.checked === true) {
                fine.style.display = "none";
                scale.style.display = "block";
                @Model.UseOfPersonalPronounsGradingTypeVM = true;
            } else {
                fine.style.display = "block";
                scale.style.display = "none";
                @Model.UseOfPersonalPronounsGradingTypeVM = false;
            }
        }
        if (event.target.id === "ShortSection") {
            fine = document.getElementById("ShortSectionFine");
            scale = document.getElementById("ShortSectionScale");
            if (checkBox.checked === true) {
                fine.style.display = "none";
                scale.style.display = "block";
                @Model.UseOfPersonalPronounsGradingTypeVM = true;
            } else {
                fine.style.display = "block";
                scale.style.display = "none";
                @Model.UseOfPersonalPronounsGradingTypeVM = false;
            }
        }
        if (event.target.id === "PictureNotReferenced") {
            fine = document.getElementById("PictureNotReferencedFine");
            scale = document.getElementById("PictureNotReferencedScale");
            if (checkBox.checked === true) {
                fine.style.display = "none";
                scale.style.display = "block";
                @Model.UseOfPersonalPronounsGradingTypeVM = true;
            } else {
                fine.style.display = "block";
                scale.style.display = "none";
                @Model.UseOfPersonalPronounsGradingTypeVM = false;
            }
        }
        if (event.target.id === "TableNotReferenced") {
            fine = document.getElementById("TableNotReferencedFine");
            scale = document.getElementById("TableNotReferencedScale");
            if (checkBox.checked === true) {
                fine.style.display = "none";
                scale.style.display = "block";
                @Model.UseOfPersonalPronounsGradingTypeVM = true;
            } else {
                fine.style.display = "block";
                scale.style.display = "none";
                @Model.UseOfPersonalPronounsGradingTypeVM = false;
            }
        }
        if (event.target.id === "ForbiddenWords") {
            fine = document.getElementById("ForbiddenWordsFine");
            scale = document.getElementById("ForbiddenWordsScale");
            if (checkBox.checked === true) {
                fine.style.display = "none";
                scale.style.display = "block";
                @Model.UseOfPersonalPronounsGradingTypeVM = true;
            } else {
                fine.style.display = "block";
                scale.style.display = "none";
                @Model.UseOfPersonalPronounsGradingTypeVM = false;
            }
        }
    }
</script>